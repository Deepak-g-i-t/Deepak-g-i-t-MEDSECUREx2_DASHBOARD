'use client';

import { useState } from 'react';
import type { Alert } from '@/types';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ArrowUpDown } from 'lucide-react';

const mockAlerts: Alert[] = [
  { id: 'BOX-501', timestamp: '2023-10-27 15:10:00', severity: 'Medium', description: 'Outbound connection to suspicious IP 198.51.100.22', ttp_id: 'T1071', status: 'New', source: 'Box', entity: 'Firewall-Main' },
  { id: 'BOX-502', timestamp: '2023-10-27 15:05:15', severity: 'High', description: 'DLP policy violation: Patient data detected in outbound email', ttp_id: 'T1530', status: 'New', source: 'Box', entity: 'user@example.com' },
  { id: 'BOX-503', timestamp: '2023-10-27 14:55:30', severity: 'Low', description: 'Port scan detected from 192.0.2.14', ttp_id: 'T1595.001', status: 'In Progress', source: 'Box', entity: 'IDS-Perimeter' },
  { id: 'BOX-504', timestamp: '2023-10-26 23:00:00', severity: 'High', description: 'C&C Beaconing detected from SRV-APP03 to evil-domain.com', ttp_id: 'T1071.001', status: 'Resolved', source: 'Box', entity: 'SRV-APP03' },
];

const severityStyles: Record<Alert['severity'], string> = {
  Critical: 'bg-purple-700 text-white border-transparent',
  High: 'bg-red-600 text-white border-transparent',
  Medium: 'bg-orange-500 text-white border-transparent',
  Low: 'bg-yellow-400 text-black border-transparent',
};

export function BoxAlertsTable() {
  const [alerts] = useState<Alert[]>(mockAlerts);
  const [sortConfig, setSortConfig] = useState<{ key: keyof Alert; direction: 'ascending' | 'descending' } | null>({ key: 'timestamp', direction: 'descending' });

  const sortedAlerts = [...alerts].sort((a, b) => {
    if (sortConfig) {
      if (a[sortConfig.key] < b[sortConfig.key]) {
        return sortConfig.direction === 'ascending' ? -1 : 1;
      }
      if (a[sortConfig.key] > b[sortConfig.key]) {
        return sortConfig.direction === 'ascending' ? 1 : -1;
      }
    }
    return 0;
  });

  const requestSort = (key: keyof Alert) => {
    let direction: 'ascending' | 'descending' = 'ascending';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  return (
    <Card className="rounded-2xl shadow-lg">
      <CardHeader>
        <CardTitle>Recent MED x Box Alerts</CardTitle>
        <CardDescription>Security alerts generated by the MED x Box appliance.</CardDescription>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>
                 <Button variant="ghost" onClick={() => requestSort('severity')}>
                    Severity <ArrowUpDown className="ml-2 h-4 w-4" />
                  </Button>
              </TableHead>
              <TableHead>Description</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>
                 <Button variant="ghost" onClick={() => requestSort('timestamp')}>
                    Timestamp <ArrowUpDown className="ml-2 h-4 w-4" />
                  </Button>
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {sortedAlerts.map((alert) => (
              <TableRow key={alert.id}>
                <TableCell>
                  <Badge className={severityStyles[alert.severity]}>{alert.severity}</Badge>
                </TableCell>
                <TableCell className="font-medium">{alert.description}</TableCell>
                <TableCell>
                  <Badge variant="outline">{alert.status}</Badge>
                </TableCell>
                <TableCell>{new Date(alert.timestamp).toLocaleString()}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}
