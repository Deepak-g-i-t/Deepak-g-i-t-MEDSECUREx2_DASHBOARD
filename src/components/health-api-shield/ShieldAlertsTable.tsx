'use client';

import { useMemo, useState } from 'react';
import type { Alert } from '@/types';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { ArrowUpDown } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { StatusBadge } from '../ui/StatusBadge';

const mockAlerts: Alert[] = [
  { id: 'SH-101', timestamp: '2023-10-27 14:40:00', severity: 'High', description: 'Anomalous API usage pattern detected for user_123', ttp_id: 'T1497.003', status: 'New', source: 'Shield', entity: 'API Gateway' },
  { id: 'SH-102', timestamp: '2023-10-27 14:35:10', severity: 'Critical', description: 'PII leakage detected in API response to IP 192.168.1.100', ttp_id: 'T1530', status: 'New', source: 'Shield', entity: 'Patient Records API' },
  { id: 'SH-103', timestamp: '2023-10-27 13:50:25', severity: 'Medium', description: 'Excessive 4xx errors from client IP 203.0.113.45', ttp_id: 'T1110', status: 'In Progress', source: 'Shield', entity: 'API Gateway' },
  { id: 'SH-104', timestamp: '2023-10-26 21:30:00', severity: 'High', description: 'Potential API scraping activity from a single user session', ttp_id: 'T1003', status: 'Resolved', source: 'Shield', entity: 'Appointments API' },
];

const severityStyles: Record<Alert['severity'], string> = {
  Critical: 'bg-purple-700 text-white border-transparent',
  High: 'bg-red-600 text-white border-transparent',
  Medium: 'bg-orange-500 text-white border-transparent',
  Low: 'bg-yellow-400 text-black border-transparent',
};

export function ShieldAlertsTable() {
  const [alerts] = useState<Alert[]>(mockAlerts);
  const [sortConfig, setSortConfig] = useState<{ key: keyof Alert; direction: 'ascending' | 'descending' } | null>({ key: 'timestamp', direction: 'descending' });
  const [severityFilter, setSeverityFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');

  const filteredData = useMemo(() => {
    return alerts.filter(alert => {
      const severityMatch = severityFilter === 'all' || alert.severity === severityFilter;
      const statusMatch = statusFilter === 'all' || alert.status === statusFilter;
      return severityMatch && statusMatch;
    });
  }, [alerts, severityFilter, statusFilter]);

  const sortedAlerts = useMemo(() => {
    let sortableItems = [...filteredData];
    if (sortConfig) {
      if (sortConfig.key === 'severity') {
        const severityOrder = { 'Critical': 4, 'High': 3, 'Medium': 2, 'Low': 1 };
        sortableItems.sort((a, b) => {
          const aVal = severityOrder[a.severity] ?? 0;
          const bVal = severityOrder[b.severity] ?? 0;
          if (aVal < bVal) return sortConfig.direction === 'ascending' ? -1 : 1;
          if (aVal > bVal) return sortConfig.direction === 'ascending' ? 1 : -1;
          return 0;
        });
      } else {
         sortableItems.sort((a, b) => {
            if (a[sortConfig.key] < b[sortConfig.key]) {
                return sortConfig.direction === 'ascending' ? -1 : 1;
            }
            if (a[sortConfig.key] > b[sortConfig.key]) {
                return sortConfig.direction === 'ascending' ? 1 : -1;
            }
            return 0;
        });
      }
    }
    return sortableItems;
  }, [filteredData, sortConfig]);

  const requestSort = (key: keyof Alert) => {
    let direction: 'ascending' | 'descending' = 'ascending';
    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  return (
    <Card className="rounded-2xl shadow-lg">
      <CardHeader className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div className="flex-1">
            <CardTitle>Recent Shield Alerts</CardTitle>
            <CardDescription>Security alerts generated by Health API Shield.</CardDescription>
        </div>
        <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
            <Select value={severityFilter} onValueChange={setSeverityFilter}>
                <SelectTrigger className="w-full sm:w-[160px]">
                    <SelectValue placeholder="Filter by severity" />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value="all">All Severities</SelectItem>
                    <SelectItem value="Critical">Critical</SelectItem>
                    <SelectItem value="High">High</SelectItem>
                    <SelectItem value="Medium">Medium</SelectItem>
                    <SelectItem value="Low">Low</SelectItem>
                </SelectContent>
            </Select>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger className="w-full sm:w-[160px]">
                    <SelectValue placeholder="Filter by status" />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value="all">All Statuses</SelectItem>
                    <SelectItem value="New">New</SelectItem>
                    <SelectItem value="In Progress">In Progress</SelectItem>
                    <SelectItem value="Resolved">Resolved</SelectItem>
                </SelectContent>
            </Select>
        </div>
      </CardHeader>
      <CardContent>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="text-center">
                 <Button variant="ghost" onClick={() => requestSort('severity')}>
                    Severity <ArrowUpDown className="ml-2 h-4 w-4" />
                  </Button>
              </TableHead>
              <TableHead>Description</TableHead>
              <TableHead className="hidden sm:table-cell text-center">Status</TableHead>
              <TableHead className="text-center">
                 <Button variant="ghost" onClick={() => requestSort('timestamp')}>
                    Timestamp <ArrowUpDown className="ml-2 h-4 w-4" />
                  </Button>
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {sortedAlerts.map((alert) => (
              <TableRow key={alert.id}>
                <TableCell className="text-center">
                  <Badge className={severityStyles[alert.severity]}>{alert.severity}</Badge>
                </TableCell>
                <TableCell className="font-medium">{alert.description}</TableCell>
                <TableCell className="hidden sm:table-cell text-center">
                  <StatusBadge status={alert.status} />
                </TableCell>
                <TableCell className="text-center">{new Date(alert.timestamp).toLocaleString()}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </CardContent>
    </Card>
  );
}
